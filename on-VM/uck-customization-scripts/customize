#!/bin/bash

###################################################################################
# UCK - Ubuntu Customization Kit                                                  #
# Copyright (C) 2006-2010 UCK Team                                                #
#                                                                                 #
# UCK is free software: you can redistribute it and/or modify                     #
# it under the terms of the GNU General Public License as published by            #
# the Free Software Foundation, either version 3 of the License, or               #
# (at your option) any later version.                                             #
#                                                                                 #
# UCK is distributed in the hope that it will be useful,                          #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                  #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                   #
# GNU General Public License for more details.                                    #
#                                                                                 #
# You should have received a copy of the GNU General Public License               #
# along with UCK.  If not, see <http://www.gnu.org/licenses/>.                    #
###################################################################################

function failure()
{
	echo "$@"
	exit 1
}

function prepare_install()
{
	#try 2 times to avoid slow proxies failures
	apt-get update || apt-get update || failure "apt-get update failed, error=$?"
}

function install_packages()
{
	apt-get install --assume-yes --force-yes "$@" || failure "apt-get install $@ failed, error=$?"
}

function remove_packages()
{
	apt-get --purge remove --assume-yes --force-yes "$@" || failure "apt-get remove $@ failed, error=$?"
}

function run_console()
{
	echo "Starting console application..."
	
	CONSOLE_APP=`which konsole`
	CONSOLE_APP_OPTIONS=(--caption "UCK customization console" -e /bin/bash)
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which gnome-terminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xfce4-terminal`
		CONSOLE_APP_OPTIONS=(-T "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which lxterminal`
		CONSOLE_APP_OPTIONS=(-t "UCK customization console" -e /bin/bash)
	fi
	if [ "$CONSOLE_APP" = "" ]; then
		CONSOLE_APP=`which xterm`
		CONSOLE_APP_OPTIONS=(-title "UCK customization console" -e /bin/bash)
	fi
	
	if [ "$CONSOLE_APP" = "" ]; then
		dialog_msgbox "Failure" "Unable to find any console application"
	else
		eval `dbus-launch --sh-syntax --exit-with-session 2>/dev/null`
		$CONSOLE_APP "${CONSOLE_APP_OPTIONS[@]}"
		RESULT=$?
	fi
}

SCRIPT_DIR=`dirname "$0"`
. "$SCRIPT_DIR/gui.sh"

# Inherit environment
[ -f "$SCRIPT_DIR/environment" ] &&
	. "$SCRIPT_DIR/environment"

LIVECD_LANGS=`cat "$SCRIPT_DIR/language_packs"`
RUN_MANUAL_CUSTOMIZATIONS=`cat "$SCRIPT_DIR/run_manual_customizations"`
DESKTOP_TYPE=`cat "$SCRIPT_DIR/desktop_type"`

DESKTOP_FLAVOURS=`cat "$SCRIPT_DIR/desktop_types"`

# Print some information on the system being customized:
rel="`lsb_release -is` `lsb_release -rs`"
kernel=`ls /boot/config-* | sed 's/.*config-//'`
arch=`if [ -d /lib64 ]; then echo x86_64; else echo i586; fi`
echo ">> Customizing: $rel, $kernel $arch"

prepare_install || failure "Preparing installation failed, error=$?"

# List of packages to install to support the selected languages:
PACKAGES_TO_INSTALL=""
# Pattern to match all selected language packs:
LANGPACKS_CONCATENATED=""
# List of language related packages available in the repositories:
REPO_LANGS=`apt-cache search "^language-" | sed 's/[ 	].*//'`

echo "Installing language packs ($LIVECD_LANGS)..."
if [ -n "$LIVECD_LANGS" ]; then
	for l in $LIVECD_LANGS; do
		# Add language specific packages not releated to kde or gnome
		add=`echo "$REPO_LANGS" | grep -- -"$l" | grep -Ev "kde|gnome"`
		PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"
	
		# Add desktop specific language packages
		if [ -n "$DESKTOP_FLAVOURS" ]; then
			for f in $DESKTOP_FLAVOURS; do
				add=`echo "$REPO_LANGS" | grep -- -$f-$l`
				PACKAGES_TO_INSTALL="$PACKAGES_TO_INSTALL $add"
			done
		fi
	
		if [ -z "$LANGPACKS_CONCATENATED" ]; then
			LANGPACKS_CONCATENATED="$l"
		else
			LANGPACKS_CONCATENATED="$LANGPACKS_CONCATENATED|$l"
		fi
	done
	
	install_packages $PACKAGES_TO_INSTALL ||
		failure "Installing language packs failed, error=$?"
	
	# NOTE:	we first install selected language packs, then remove others as
	#	installing a language pack might pull in packages that were not
	#	previously present
	echo "Removing unnecessary language packages..."
	REMOVED_PACKAGES=`dpkg-query --show | cut -f1 | grep -E '^(language-pack|language-support|firefox-locale)' | grep -Ev "[-]($LANGPACKS_CONCATENATED)\>"`
	remove_packages $REMOVED_PACKAGES ||
		failure "Removing packages failed, error=$?"
fi

if [ "$RUN_MANUAL_CUSTOMIZATIONS" = "yes" ] ; then
	while true ; do
		CHOICE_CONSOLE="Run console application"
		CHOICE_EXIT="Continue building"
		CHOICE=`dialog_menu "Please choose customization action" "$CHOICE_CONSOLE" "$CHOICE_EXIT"`
		RESULT=$?

		if [ -z $CHOICE ] ; then
			failure "Script cancelled by user"
		fi
		#workaround for KDE bug (https://bugs.kde.org/show_bug.cgi?id=139025)
		CHOICE=`echo "$CHOICE" | grep -v -i kwrited | tail -n1`

		echo "CHOICE='$CHOICE'"

		if [ "$CHOICE" = "$CHOICE_EXIT" ] ; then
			break
		elif [ "$CHOICE" = "$CHOICE_CONSOLE" ] ; then
			run_console
		fi
	done
fi

# --- Start contest customisation of LiveCD: could really do with refactoring! (dme) ---

export DEBIAN_FRONTEND=noninteractive

# Install and remove packages
dpkg-divert --local --add /etc/init.d/systemd-logind
ln -s /bin/true /etc/init.d/systemd-logind
add-apt-repository -y ppa:webupd8team/sublime-text-3
sed -i 's/ main / main universe multiverse /g' /etc/apt/sources.list
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
echo "deb http://download.mono-project.com/repo/debian wheezy main" | tee /etc/apt/sources.list.d/mono-xamarin.list
apt-get update
apt-get -y install build-essential vim vim-gtk emacs sublime-text-installer idle-python2.7 idle-python3.4 eclipse eclipse-cdt-valgrind monodevelop gedit-developer-plugins gedit-plugins anjuta-extras geany-plugins clang-3.5
apt-get -y purge thunderbird libreoffice-core empathy rhythmbox shotwell transmission-gtk simple-scan aisleriot gnome-sudoku gnome-mahjongg gnomine unity-webapps-common software-center landscape-client-ui-install unity-control-center-signon ubiquity gparted remmina
apt-get -y autoremove
# apt-get -y upgrade

# -\/- Build a given version of the VirtualBox guest extensions (thanks to Malcolm)
if [ -n "$PCC_VBOX_GA" ]; then
	wget -nv http://download.virtualbox.org/virtualbox/$PCC_VBOX_GA/VBoxGuestAdditions_$PCC_VBOX_GA.iso
	apt-get -y install dkms gcc linux-headers-generic
	mount -o loop,ro VBoxGuestAdditions_$PCC_VBOX_GA.iso /mnt
	sh /mnt/VBoxLinuxAdditions.run --nox11
	umount /mnt
	rm VBoxGuestAdditions_$PCC_VBOX_GA.iso
	ln -s /opt/VBoxGuestAdditions-$PCC_VBOX_GA/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions
fi
# -/\-

# Install firewall, blocking all external IPs except domserver.cosc.canterbury.ac.nz (132.181.7.114) and dmjappprd01.sit.auckland.ac.nz (130.216.8.43)
# Modify the two lines before "COMMIT" to restrict the IPs of the printers allowed
apt-get -y install iptables-persistent
cat << EOF_IPTABLERULES > /etc/iptables/rules.v4
# Generated by iptables-save v1.4.21 on Thu Aug  6 13:24:05 2015
*filter
:INPUT DROP [652:124986]
:FORWARD ACCEPT [0:0]
:OUTPUT DROP [2784:493258]
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
-A OUTPUT -d 132.181.7.114/32 -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -d 130.216.8.43/32 -p tcp -m tcp --dport 80 -j ACCEPT
-A OUTPUT -p udp -m udp --dport 631 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 631 -j ACCEPT
COMMIT
# Completed on Thu Aug  6 13:24:05 2015
EOF_IPTABLERULES

# Setup printers
#
# Commented out due to there being no useful default configuration,
# and DomJudge providing printing support for SPPC.
#
## # ADDITIONALLY, PLACE THE PRINTER'S PPD IN /etc/cups/ppd/
## cat << EOF_PRINTER > /etc/cups/printers.conf
## # Printer configuration file for CUPS v1.7.2
## # Written by cupsd
## # DO NOT EDIT THIS FILE WHEN CUPSD IS RUNNING
## <DefaultPrinter 205>
## UUID urn:uuid:6d6b9a28-750b-3713-5352-627c5f213590
## Info HP LaserJet 4350
## Location Lab 2.05
## DeviceURI ipp://130.95.116.32
## PPDTimeStamp *
## State Idle
## StateTime 1439606521
## Type 8425668
## Accepting Yes
## Shared Yes
## ColorManaged Yes
## JobSheets none none
## QuotaPeriod 0
## PageLimit 0
## KLimit 0
## OpPolicy default
## ErrorPolicy retry-job
## </Printer>
## EOF_PRINTER

# Cleanup example content, and place useful links instead
rm -r /usr/share/example-content/*
# -\/- Malcolm's team desktop customisation
cat << EOF_DOMJUDGE > /usr/share/example-content/domjudge.desktop
[Desktop Entry]
Encoding=UTF-8
Name=DOMJudge Server
Terminal=False
Type=Link
URL=http://dmjappprd01.sit.auckland.ac.nz/domjudge/team/
Icon=text-html
EOF_DOMJUDGE

cat << EOF_DOCURL > /usr/share/example-content/docs.desktop
[Desktop Entry]
Encoding=UTF-8
Name=Language References
Type=Link
URL=http://dmjappprd01.sit.auckland.ac.nz/contestantdocs/
Terminal=False
Icon=text-html
EOF_DOCURL

cat << EOF_DATA > /usr/share/example-content/data.desktop
[Desktop Entry]
Encoding=UTF-8
Name=Sample Data
Type=Link
URL=http://dmjappprd01.sit.auckland.ac.nz/sampledata.zip
Terminal=False
Icon=text-html
EOF_DATA

cat << EOF_BACKUPSERVER > /usr/share/example-content/backup.desktop
[Desktop Entry]
Encoding=UTF-8
Name=Emergency DOMJudge Server
Type=Link
URL=http://domserver.cosc.canterbury.ac.nz/domjudge/team/
Terminal=False
Icon=text-html
EOF_BACKUPSERVER
# -/\- Malcolm's team desktop customisation

# Set Firefox homepage to http://domserver.cosc.canterbury.ac.nz/domjudge/team/
cat << EOF_FIREPREFS > /usr/lib/firefox/defaults/pref/all.corp.js
lockPref("browser.startup.homepage","$PCC_BROWSER_START_PAGE");
EOF_FIREPREFS

# Set timezone
echo "$PCC_TIMEZONE" | tee /etc/timezone
dpkg-reconfigure --frontend noninteractive tzdata

# Add in users
useradd -m team
useradd -m judge
adduser judge sudo
chpasswd <<END
team:team
judge:$PCC_JUDGE_PW
END

echo "Done"
